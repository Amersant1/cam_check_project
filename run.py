#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–¥–æ–±–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞
"""

import os
import sys
import subprocess
import platform
import argparse

def check_docker():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker"""
    try:
        result = subprocess.run(['docker', '--version'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ Docker –Ω–∞–π–¥–µ–Ω: {result.stdout.strip()}")
            return True
    except FileNotFoundError:
        pass
    
    print("‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤.")
    return False

def check_docker_compose():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker Compose"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º docker compose (–Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–±)
        result = subprocess.run(['docker', 'compose', 'version'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ Docker Compose –Ω–∞–π–¥–µ–Ω: {result.stdout.strip()}")
            return 'docker compose'
    except FileNotFoundError:
        pass
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º docker-compose (—Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±)
        result = subprocess.run(['docker-compose', '--version'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ Docker Compose –Ω–∞–π–¥–µ–Ω: {result.stdout.strip()}")
            return 'docker-compose'
    except FileNotFoundError:
        pass
    
    print("‚ùå Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return None

def run_docker_build():
    """–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞"""
    compose_cmd = check_docker_compose()
    if not compose_cmd:
        return False
    
    print("üî® –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞...")
    cmd = compose_cmd.split() + ['build']
    result = subprocess.run(cmd)
    return result.returncode == 0

def run_docker_app():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ Docker"""
    compose_cmd = check_docker_compose()
    if not compose_cmd:
        return False
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ Docker...")
    cmd = compose_cmd.split() + ['run', '--rm', 'voice-recognition', 'python', 'app.py']
    subprocess.run(cmd)

def run_docker_examples():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤ Docker"""
    compose_cmd = check_docker_compose()
    if not compose_cmd:
        return False
    
    print("üìö –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤ Docker...")
    cmd = compose_cmd.split() + ['run', '--rm', 'voice-recognition', 'python', 'examples.py']
    subprocess.run(cmd)

def run_local_setup():
    """–õ–æ–∫–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ pip
    try:
        subprocess.run([sys.executable, '-m', 'pip', '--version'], 
                      capture_output=True, check=True)
    except subprocess.CalledProcessError:
        print("‚ùå pip –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python —Å pip.")
        return False
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    requirements_path = os.path.join('app', 'requirements.txt')
    if not os.path.exists(requirements_path):
        print(f"‚ùå –§–∞–π–ª {requirements_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return False
    
    try:
        result = subprocess.run([
            sys.executable, '-m', 'pip', 'install', '-r', requirements_path
        ], check=True)
        print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
        return False

def run_local_app():
    """–õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app_path = os.path.join('app', 'app.py')
    if not os.path.exists(app_path):
        print(f"‚ùå –§–∞–π–ª {app_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ...")
    os.chdir('app')
    subprocess.run([sys.executable, 'app.py'])

def run_local_examples():
    """–õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤"""
    examples_path = os.path.join('app', 'examples.py')
    if not os.path.exists(examples_path):
        print(f"‚ùå –§–∞–π–ª {examples_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    print("üìö –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ...")
    os.chdir('app')
    subprocess.run([sys.executable, 'examples.py'])

def show_system_info():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
    print("üñ•Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:")
    print(f"  –û–°: {platform.system()} {platform.release()}")
    print(f"  Python: {sys.version}")
    print(f"  –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {platform.machine()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    try:
        import sounddevice as sd
        devices = sd.query_devices()
        input_devices = [d for d in devices if d['max_input_channels'] > 0]
        print(f"  –ê—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–≤–æ–¥–∞: {len(input_devices)}")
        for i, device in enumerate(input_devices[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            print(f"    {i}: {device['name']}")
    except ImportError:
        print("  –ê—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ sounddevice")
    except Exception as e:
        print(f"  –ê—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ({e})")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description='–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞'
    )
    parser.add_argument('--info', action='store_true', 
                       help='–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ')
    parser.add_argument('--docker', action='store_true',
                       help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Docker')
    parser.add_argument('--local', action='store_true',
                       help='–ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ')
    parser.add_argument('--setup', action='store_true',
                       help='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏')
    parser.add_argument('--examples', action='store_true',
                       help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã')
    parser.add_argument('--build', action='store_true',
                       help='–°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑')
    
    args = parser.parse_args()
    
    print("üé§ –ü—Ä–æ–µ–∫—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞")
    print("=" * 40)
    
    if args.info:
        show_system_info()
        return
    
    if args.build:
        if check_docker():
            run_docker_build()
        return
    
    if args.docker:
        if check_docker():
            if args.examples:
                run_docker_examples()
            else:
                run_docker_app()
        return
    
    if args.local:
        if args.setup:
            if run_local_setup():
                print("‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
        elif args.examples:
            run_local_examples()
        else:
            run_local_app()
        return
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
    while True:
        print("\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –ó–∞–ø—É—Å–∫ –≤ Docker (–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)")
        print("2. –ó–∞–ø—É—Å–∫ –≤ Docker (–ø—Ä–∏–º–µ—Ä—ã)")
        print("3. –õ–æ–∫–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        print("4. –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        print("5. –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤")
        print("6. –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞")
        print("7. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
        print("0. –í—ã—Ö–æ–¥")
        
        try:
            choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (0-7): ").strip()
            
            if choice == '0':
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif choice == '1':
                if check_docker():
                    run_docker_app()
            elif choice == '2':
                if check_docker():
                    run_docker_examples()
            elif choice == '3':
                run_local_setup()
            elif choice == '4':
                run_local_app()
            elif choice == '5':
                run_local_examples()
            elif choice == '6':
                if check_docker():
                    run_docker_build()
            elif choice == '7':
                show_system_info()
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
                
        except KeyboardInterrupt:
            print("\nüëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
